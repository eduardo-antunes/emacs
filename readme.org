#+title: Minha configuração do GNU emacs
#+author: Eduardo Antunes
#+property: header-args:emacs-lisp :tangle ./init.el

Bem-vindo à minha humilde configuração do GNU emacs, um editor de texto livre e extensível.

* Introdução

O emacs é mais que um editor de texto. É também um interpretador de uma linguagem de scripting chamada de emacs-lisp ou elisp. Essa linguagem é utilizada para configurá-lo e extendê-lo. Quando o editor é iniciado, ele executa alguns arquivos de elisp do usuário. Esses arquivos são o =init.el= e o =early-init.el=, localizados, geralmente, sob o diretório =~/.emacs.d=.

O =init.el= é o arquivo clássico de configuração do emacs. Eu o escrevi de tal maneira que, sempre que eu salvo este documento aqui, os trechos de elisp sejam escritos nele (a configuração para esse comportamento está [[#lit][aqui]] e no cabeçalho deste arquivo). Assim, o =readme.org= funciona como uma configuração na prática. É bem mais conveniente do que editar emacs-lisp diretamente.

Já o =early-init.el= é uma adição nova ao ecossistema do emacs. Ele é executado antes da interface gráfica ser desenhada e do sistema de pacotes ser inicializado. Assim, ele é útil para algumas configurações seletas que se beneficiam de uma execução mais adiantada. Eu o uso para configurar a garbage collection, remover elementos da GUI e determinar a fonte.

* Pacotes

Pacotes são como o emacs chama seus plugins ou extensões. Eles são a principal maneira de extender a funcionalidade do editor, e eu instalo vários ao longo dessa configuração.

** package.el

O =package.el= é o gerenciador nativo de pacotes. Eu o configuro para baixar pacotes de três fontes: o melpa (repositório da comunidade), o nonGNU e o elpa (repositório oficial do GNU).

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** use-package

O =use-package= é um excelente pacote que introduz uma camada de abstração sobre o gerenciador de pacotes, integrando as ações de configuração e instalação de pacotes em uma única macro. O seu uso torna a minha configuração bem mais limpa e organizada.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Geral

** Informações pessoais

Alguns pacotes precisam desse tipo de informação.

#+begin_src emacs-lisp
  (setq user-full-name       "Eduardo Antunes"
        user-real-login-name "Eduardo"
        user-login-name      "eduardo"
        user-mail-address    "eduardoantunes986@gmail.com")
#+end_src

** Organização de arquivos

A organização de arquivos de configuração e de dados não é consistente entre os vários pacotes. O pacote =no-littering= soluciona esse problema configurando uma ampla seleção de pacotes para deixar suas configurações em um diretório =etc= e seus dados em um =var=, ambos localizados sob o =.emacs.d= por padrão.

#+begin_src emacs-lisp
  (use-package no-littering)
#+end_src

Arquivos de auto-save deveriam ir no =var=.

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

E customizações feitas utilizando o sistema Customize deveriam ir no =etc=.

#+begin_src emacs-lisp
  (setq-default custom-file (no-littering-expand-etc-file-name "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** Rolagem suave

Eu detesto a rolagem padrão do emacs. Rolagem suave é uma necessidade básica pra mim.

#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :init (smooth-scrolling-mode 1))
#+end_src

** Miscelânea

Não quero ter que digitar "yes" ou "no" por extenso toda hora.

#+begin_src emacs-lisp
  (defalias #'yes-or-no-p #'y-or-n-p)
#+end_src

Nada de espaços em branco sobrando.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook #'whitespace-cleanup)
#+end_src

Mover arquivos para a lixeira é mais seguro que excluir eles pra sempre.

#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t)
#+end_src

Obrigado, mas não.

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq-default initial-scratch-message nil)
#+end_src

* Teclado

Alguns pacotes que eu uso para configurar meus atalhos de teclado.

** Evil

Eu não sou um grande fã dos atalhos de edição padrão do emacs, especialmente depois de ter conhecido os atalhos ergonômicos do vim. Felizmente, o excelente pacote =evil= permite ao emacs emular a experiência confortável de edição que o vim oferece.

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

*** Complementos do evil

O =evil-collection= aumenta a integração do =evil= com uma ampla coleção de pacotes, e o =evil-nerd-commenter= emula um dos vários plugins de comentário feitos para o vim.

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-nerd-commenter
    :after evil
    :config (evilnc-default-hotkeys t) ;; use default key bindings (M-;) in Emacs state
    :bind (:map evil-normal-state-map
                ("gc" . evilnc-comment-or-uncomment-lines)))
#+end_src

** General

O =general.el= é um pacote análogo ao =use-package=, mas para a criação de atalhos de teclado. Eu o utilizo principalmente para criar atalhos prefixados por uma tecla-líder, à maneira do vim.

#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config

    (general-create-definer ed-leader-key
      :states '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-c")

    (ed-leader-key
      "SPC" #'find-file
      "."   #'dired-jump
      ":"   '(execute-extended-command :which-key "M-x")

      ;; compile operations
      "c"   '(:ignore t :which-key "compile")
      "cc"  #'compile
      "cr"  #'recompile

      ;; buffer operations
      "b"   '(:ignore t :which-key "buffer")
      "bb"  #'switch-to-buffer
      "bd"  #'kill-current-buffer
      "bk"  #'kill-buffer

      ;; keymaps
      "w"   '(:keymap evil-window-map :which-key "window")
      "h"   '(:keymap help-map :which-key "help")
      "o"   '(:ignore t :which-key "open")
      "m"   '(:ignore t :which-key "mode")))
#+end_src

** Which-key

Às vezes é difícil lembrar de todos os atalhos de teclado. O pacote =which-key= é uma verdadeira mão na roda nessas horas.

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :custom
    (which-key-sort-order #'which-key-prefix-then-key-order)
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

* Aparência

Na minha opinião, o visual padrão é ok, mas eu não usaria por um período prolongado nem sob ameaça.

** Linhas numeradas

Linhas numeradas são bem úteis...

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
#+end_src

...exceto em alguns modos.

#+begin_src emacs-lisp
  (dolist (mode '(org-mode-hook
                  eww-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  calendar-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Fonte

A minha fonte de preferência no momento é a Source Code Pro.

#+begin_src emacs-lisp
  (ed-set-font) ; função definida no early-init
#+end_src

** Tema

Meus temas principais no momento são =modus-operandi= (claro) e =modus-vivendi= (escuro).

#+begin_src emacs-lisp
  (use-package modus-themes
    :custom
    (modus-themes-org-blocks 'gray-background)
    (modus-themes-mode-line '(borderless 4))
    :general
    (ed-leader-key
      "t" #'modus-themes-toggle))

  (let ((time (string-to-number (format-time-string "%H"))))
    (if (and (> time 5) (< time 18))
        (modus-themes-load-operandi)
      (modus-themes-load-vivendi)))

#+end_src

** Modeline

*** Minions

De modo geral, eu gosto da modeline padrão. Eu só não gosto que a seção dos modos menores fique muito entulhada. O pacote =minions= substitui "ícones" dos modos menores pelo próprio e oferece um menu para gerenciá-los. Ele também permite que você selecione alguns para que sejam exibidos normalmente sempre que ativos, o que é ótimo.

#+begin_src emacs-lisp
  (use-package minions
    :custom
    (minions-mode-line-lighter "...")
    :config (minions-mode 1))
#+end_src

*** Tempo

Ainda estou decidindo se gosto disso.

#+begin_src emacs-lisp :tangle no
  (setq display-time-format "%H:%M"
        display-time-default-load-average nil
        display-time-interval 60)
  (display-time-mode 1)
#+end_src

* Completion

Frequentemente, para utilizar uma funcionalidade do emacs, é preciso selecionar uma opção entre uma lista de candidatos. O exemplo mais clássico disso é o =M-x=, que executa um comando entre os existentes. Completion é o auxílio que o editor dá ao usuário nesses processos, seja completando o que ele escreve ou simplesmente exibindo a lista de candidatos.

** Orderless

Toda seleção se baseia nos chamados estilos de seleção. Eles são funções que mapeiam o input do usuário aos candidatos a que ele possivelmente se refere. Opções nativas existem e são o padrão, mas os estilos oferecidos pelo pacote =orderless= me agradam mais. Todos eles admitem que o input do usuário seja mapeado fora de ordem aos candidatos, o que é bem inteligente.

#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

** Vertico

Uma versão mínima do tradicional =ivy=, o =vertico= exibe a lista de candidatos de uma seleção em uma lista vertical, o que é bem útil.

#+begin_src emacs-lisp
  (defun ed-minibuffer-backward-kill (arg)
    "Um delete mais conveniente no minibuffer"
    (interactive "p")
    (if minibuffer-completing-file-name
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (backward-delete-char arg)))

  (use-package vertico
    :general
    (general-def vertico-map
      "C-j"  #'vertico-next
      "C-k"  #'vertico-previous
      "C-l"  #'vertico-exit-input)

    (general-def minibuffer-local-map
      "M-h"          #'backward-kill-word
      "<backspace>"  #'ed-minibuffer-backward-kill)

    :init
    (vertico-mode))
#+end_src

** Marginalia

O =marginalia= inclui anotações úteis junto aos candidatos sempre que eles são exibidos em uma interface, o que inclui a listagem nativa de candidatos e soluções de terceiros, como o =vertico=.

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :init (marginalia-mode))
#+end_src

** Corfu

O =corfu= é análogo ao =vertico=, mas age em buffers comuns ao invés do minibuffer.

#+begin_src emacs-lisp
  (use-package corfu
    :demand t
    :custom
    (corfu-cycle t)
    (corfu-preselect-first nil)
    :config
    (setq tab-always-indent 'complete)
    (corfu-global-mode 1)
    :general
    (general-def corfu-map
      "TAB"      #'corfu-next
      [tab]      #'corfu-next
      "S-TAB"    #'corfu-previous
      [backtab]  #'corfu-previous))
#+end_src

* Ferramentas

** Org

O =org-mode= é um pacote realmente extraordinário. Em essência, ele é uma linguagem de marcação, como markdown e latex. Ele combina uma sintaxe simples e legível com uma grande riqueza de /features/, que incluem embarcação de trechos de código, suporte a latex /inline/, entre outros.

No entanto, o que realmente torna esse pacote especial é a biblioteca de funcionalidades úteis que ele oferece, que tornam essa simples linguagem um sistema eficiente de preparação de documentos, programação literária e planejamento.

*** Aparência

#+begin_src emacs-lisp
    (defun ed-org-mode-setup ()
      (org-indent-mode)
      (visual-line-mode 1)
      (dolist (pair '(("#+begin_src" . ?λ)
                      ("#+BEGIN_SRC" . ?λ)
                      ("#+end_src"   . ?λ)
                      ("#+END_SRC"   . ?λ)))
        (add-to-list 'prettify-symbols-alist pair))
      (prettify-symbols-mode))

    (use-package org
      :defer t
      :hook (org-mode . ed-org-mode-setup)
      :custom
      (org-hide-emphasis-markers t)
      :config
      (setq org-ellipsis " ▾"))

    (use-package org-bullets
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("●" "○" "●" "○" "●" "○" "●")))

    (defun ed-org-mode-visual-fill ()
      (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . ed-org-mode-visual-fill))


#+end_src

*** Configuração literária
:properties:
:custom_id: lit
:end:

#+begin_src emacs-lisp
  (defun ed-org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ed-org-babel-tangle-config)))
#+end_src

** Dired

O editor de diretórios ou =dired= é o explorador de arquivos nativo do emacs.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :custom
    (dired-listing-switches "-Al --group-directories-first")
    :general
    (general-def 'normal 'dired-mode-map
      "SPC" nil
      "h"   #'dired-up-directory
      "l"   #'dired-find-file))
#+end_src

** Eshell

A =eshell= é uma shell estilo UNIX integrada ao emacs. Ela permite que você não só execute programas no sistema, mas também funções internas do emacs, o que lhe confere uma flexibilidade muito grande. Além disso, ela funciona perfeitamente no Windows, ainda que com um desempenho menor.

#+begin_src emacs-lisp
  (defun ed-eshell-prompt ()
    (concat
     (eshell/pwd)
     (if (= (user-uid) 0) " # "
       " λ ")))

  (defun ed-eshell-setup ()
    (require 'evil-collection-eshell)
    (evil-collection-eshell-setup)

    ;; Salve comandos no histórico à medida que eles forem inseridos
    (add-hook 'eshell-pre-command-hook #'eshell-save-some-history)

    ;; Reduza o buffer do eshell quando ele exceder o máximo de linhas
    (add-to-list 'eshell-output-filter-functions #'eshell-truncate-buffer)

    (setq eshell-history-size 10000
          eshell-hist-ignore-dups t
          eshell-buffer-maximum-lines 10000
          eshell-prompt-function #'ed-eshell-prompt
          eshell-prompt-regexp "^[^λ#]*[λ#] "
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell
    :ensure nil
    :hook (eshell-first-time-mode . ed-eshell-setup)
    :general
    (ed-leader-key
      "oe" #'eshell))

  (use-package eshell-syntax-highlighting
    :after eshell
    :hook (eshell-mode . eshell-syntax-highlighting-mode))
#+end_src

** Vterm

O melhor emulador de terminal para o emacs.

#+begin_src emacs-lisp
  (use-package vterm
    :general
    (ed-leader-key
      "ot" '(vterm-other-window :which-key "terminal")
      "oT" '(vterm :which-key "terminal full")))
#+end_src

** Pomodoro

Um cronômetro pomodoro bão. (preciso melhorar esse texto)

#+begin_src emacs-lisp
  (use-package pomm
    :commands (pomm pomm-start)
    :custom
    (pomm-state-file-location
     (no-littering-expand-var-file-name "pomm.el"))
    :general
    (ed-leader-key
      "op" '(pomm :which-key "pomodoro")))
#+end_src

* Programação

Essa seção está bem mal documentada e desorganizada. ¯\_(ツ)_/¯

** Git

O =magit= é um pacote clássico do emacs. Possivelmente a melhor porcelana existente para o git.

#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :general
    (ed-leader-key
      "g" '(magit-status :which-key "git")))
#+end_src

** Snippets

#+begin_src emacs-lisp
  (use-package yasnippet
    :hook
    (prog-mode . yas-minor-mode)
    (org-mode . yas-minor-mode))

  (use-package yasnippet-snippets)
#+end_src

** Projetos

O pacote =projectile= é uma biblioteca de funções que operam ao nível de projeto, o que é muito útil em projetos de programação. Vários outros pacotes possuem boa integração com ele.

#+begin_src emacs-lisp
  (use-package projectile
    :init
    (setq projectile-keympa-prefix nil)
    :config
    (projectile-mode)
    :general
    (ed-leader-key
      "p" '(:keymap projectile-command-map :which-key "project")))
#+end_src

** Linguagens

*** LSP

O /language server protocol/ (protocolo de servidores de linguagem) ou LSP é um protocolo para a comunicação entre um editor de texto e ferramentas externas de suporte para linguagens de programação (/os language servers/). O emacs não possui um cliente nativo de LSP; pelo menos não por enquanto. Felizmente, o pacote =lsp-mode= fornece essa funcionalidade, e o pacote =lsp-ui= a integra com a interface gráfica do editor.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix nil)
    :custom
    (lsp-enable-snippet t)
    (lsp-completion-provider :none)
    :config
    (setq lsp-headerline-breadcrumb-enable nil)
    (lsp-enable-which-key-integration)
    :general
    (ed-leader-key
      "l" '(:keymap lsp-command-map :which-key "lsp")))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    ;; lsp-ui documentation panels
    (lsp-ui-doc-max-height 8)
    (lsp-ui-doc-max-width 72)
    (lsp-ui-doc-delay 0.75)
    (lsp-ui-doc-show-with-cursor nil)
    (lsp-ui-doc-show-with-mouse nil)
    (lsp-ui-doc-position 'at-point)

    ;; lsp-ui sideline
    (lsp-ui-sideline-show-diagnostics t)
    (lsp-ui-sideline-show-code-actions nil)
    (lsp-ui-sideline-actions-icon lsp-ui-sideline-actions-icon-default)

    ;; lsp-ui miscelaneous
    (lsp-lens-enable t)
    (lsp-signature-render-documentation nil))
#+end_src

*** Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :hook (lsp-mode . flycheck-mode))
#+end_src

*** Setup

**** C/C++

#+begin_src emacs-lisp
  (defun ed-c-cpp-setup ()
    (c-set-style "cc-mode")
    (lsp-deferred))

  (use-package cc-mode
    :hook ((c-mode . ed-c-cpp-setup)
           (c++-mode . ed-c-cpp-setup)))
#+end_src

**** Assembly

#+begin_src emacs-lisp
  (use-package nasm-mode
    :mode "\\.asm\\'")
#+end_src

**** Python

#+begin_src emacs-lisp
  (defun ed-python-setup ()
    (require 'lsp-pyright)
    (lsp-deferred))

  (use-package python-mode)
  (use-package lsp-pyright
    :hook (python-mode . ed-python-setup))
#+end_src

**** Dart/Flutter

#+begin_src emacs-lisp
  (use-package dart-mode)

  (use-package lsp-dart
    :hook (dart-mode . lsp-deferred)
    :init
    (setq
     lsp-dart-flutter-sdk-dir "~/Downloads/flutter"
     lsp-dart-sdk-dir (concat lsp-dart-flutter-sdk-dir "/bin/cache/dart-sdk")))

  (use-package flutter
    :after dart-mode
    :general
    (ed-leader-key dart-mode-map
      "mr" '(flutter-run-or-hot-reload :which-key "hot reload")))
#+end_src

** Miscelânea

O =rainbow-mode= exibe delimitadores correspondentes com uma mesma cor.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

O modo menor =electric-pair-mode= previne delimitadores desbalanceados.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (electric-pair-local-mode 1)))
  (add-hook 'eshell-mode-hook (lambda () (electric-pair-local-mode 1)))
#+end_src

* Performance

Complemento para a configuração de garbage collection do =early-init.el=, em que eu aumento o limite de memória a ser dealocada que o emacs tolera antes de realizar uma "coleta de lixo" para 50MB. Essa configuração aumenta a performance na inicialização, mas durante o uso normal, 20MB é um valor mais razoável.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src
