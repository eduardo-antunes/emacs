#+title: Minha configuração do GNU emacs
#+author: Eduardo Antunes

Bem-vindo à minha humilde configuração do GNU emacs, um editor de texto livre e extensível.

* Introdução

O emacs é mais que um editor de texto. É também um interpretador de uma linguagem de scripting chamada de emacs-lisp ou elisp. Essa linguagem é utilizada para configurá-lo e extendê-lo. Quando o editor é iniciado, ele executa alguns arquivos de elisp do usuário. Esses arquivos são o =init.el= e o =early-init.el=, localizados, geralmente, sob o diretório =~/.emacs.d=.

O =init.el= é o arquivo clássico de configuração do emacs. Já o =early-init.el= é uma adição mais recente ao ecossistema do editor. Ele é carregado em um estágio anterior da execução do programa, o que torna útil para algumas configurações específicas.

Eu não edito nenhum dos dois diretamente. Ao invés disso, eu uso uma configuração literária: um documento org com blocos de emacs-lisp intercalados com texto explicativo. Esse documento, claro, é o que você está lendo agora. [[#lit][Essa parte]] da configuração faz com que, sempre que ele seja salvo, o conteúdo dos blocos seja usado para gerar os arquivos.

* =early-init.el=
:properties:
:header-args:emacs-lisp: :tangle ./early-init.el
:end:

Todos os blocos de elisp nessa seção se destinam ao =early-init.el=.

** Garbage collection

Como todo interpretador moderno, o emacs realiza garbage collection, uma operação que consiste em dealocar objetos que não estejam mais em uso pelo programa sendo executado (no caso, a minha configuração e os pacotes que eu uso). Essa funcionalidade é ativada sempre que esses objetos consomem uma quantidade fixa de memória.

Recentemente, eu estou experimentando [[#gc][um pacote]] que implementa uma política diferente para a realização dessa operação. Assim sendo, eu desativo a política padrão tornando o limite de consumo de memória o maior possível.

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

** Obrigado, mas não

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq-default inhibit-message t
                initial-scratch-message nil
                initial-major-mode 'fundamental-mode)
#+end_src

** Fonte

No momento, a minha fonte de preferência é a Iosevka.

#+begin_src emacs-lisp
  (defun ed-set-font ()
    "Carrega a minha fonte de preferência"
    (set-frame-font "Iosevka-14" nil t))

  (add-hook 'server-after-make-frame-hook #'ed-set-font)
#+end_src

** Visual

Eu não faço questão de alguns elementos da interface, então é melhor que o emacs nem os desenhe.

#+begin_src emacs-lisp
  (menu-bar-mode     -1)
  (tool-bar-mode     -1)
  (scroll-bar-mode   -1)
  (tooltip-mode      -1)
  (set-fringe-mode   10)
  (blink-cursor-mode  0)
#+end_src

* =init.el=
:properties:
:header-args:emacs-lisp: :tangle ./init.el
:end:

Todos os blocos de elisp nessa seção se destinam ao =init.el.=

** Pacotes

Pacotes são como o emacs chama seus plugins ou extensões. Eles são a principal maneira de extender a funcionalidade do editor, e eu instalo vários ao longo dessa configuração.

*** package.el

O =package.el= é o gerenciador nativo de pacotes. Eu o configuro para baixar pacotes de três fontes: o melpa (repositório da comunidade), o nonGNU e o elpa (repositório oficial do GNU).

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

*** use-package

O =use-package= é um excelente pacote que introduz uma camada de abstração sobre o gerenciador de pacotes, integrando as ações de configuração e instalação de pacotes em uma única macro. O seu uso torna a minha configuração bem mais limpa e organizada.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Geral

*** Garbage Collection
:properties:
:custom_id: gc
:end:

O =gcmh= (garbage collection magit hack) dispara a garbage-collection com alta frequência quando o editor está parado e com baixa frequência quando ele está sendo ativamente utilizado.

#+begin_src emacs-lisp
  (use-package gcmh
    :hook (after-init . gcmh-mode)
    :custom
    (gcmh-idle-delay 'auto)  ; default is 15s
    (gcmh-auto-idle-delay-factor 10)
    (gcmh-high-cons-threshold (* 16 1024 1024))) ;; 16MB
#+end_src

*** Padrões mais sãos

O sistema de codificação padrão deveria ser utf-8.

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (setq default-input-method nil)
#+end_src

Mover arquivos para a lixeira é mais seguro que excluir eles pra sempre.

#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t)
  (setq default-input-method nil)
#+end_src

*** Informações pessoais

Alguns pacotes precisam desse tipo de informação.

#+begin_src emacs-lisp
  (setq user-full-name       "Eduardo Antunes"
        user-mail-address    "eduardoantunes986@gmail.com")
#+end_src

*** Organização de arquivos

A organização de arquivos de configuração e de dados não é consistente entre os vários pacotes. O pacote =no-littering= soluciona esse problema configurando uma ampla seleção de pacotes para que deixem suas configurações em um diretório =etc= e seus dados em um =var=, ambos localizados sob o =.emacs.d= por padrão.

#+begin_src emacs-lisp
  (use-package no-littering)
#+end_src

Arquivos de auto-save deveriam ir no =var=.

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

E customizações feitas utilizando o sistema Customize deveriam ir no =etc=.

#+begin_src emacs-lisp
  (setq-default custom-file (no-littering-expand-etc-file-name "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

*** Seja prestativo

Não quero ter que digitar "yes" ou "no" por extenso toda hora.

#+begin_src emacs-lisp
  (defalias #'yes-or-no-p #'y-or-n-p)
#+end_src

Quando o diretório pai de um arquivo não existir, pergunte se deve criá-lo.

#+begin_src emacs-lisp
  (defun ed-make-directory-if-non-existing ()
    (let ((parent-dir (file-name-directory buffer-file-name)))
      (when (and (not (file-exists-p parent-dir))
                 (yes-or-no-p "This file's directory doesn't exist. Create it? ")
        (make-directory parent-dir t)))))

  (add-to-list 'find-file-not-found-functions #'ed-make-directory-if-non-existing)
#+end_src

Nada de espaços em branco sobrando.

#+begin_src emacs-lisp
    (add-hook 'before-save-hook #'whitespace-cleanup)
#+end_src

O pacote =which-key= ajuda muito quando eu esqueço de um atalho ou quero ver os disponíveis.

#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :custom
    (which-key-sort-order #'which-key-prefix-then-key-order)
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

*** Miscelânea

#+begin_src emacs-lisp
  (setq inhibit-startup-echo-area-message "eduardo")
#+end_src

** Teclado

Configuração dos meus atalhos de teclado.

*** Undo-tree

O =undo-tree= customiza o complicado sistema de "desfazer" do emacs para que as ações feitas em um buffer sejam visualizadas como uma árvore, como é tradicional em editores como o vim.

#+begin_src emacs-lisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode))
#+end_src

*** Evil

Eu não sou um grande fã dos atalhos de edição padrão do emacs, especialmente depois de ter conhecido os atalhos ergonômicos do vim. Felizmente, o excelente pacote =evil= permite ao emacs emular a experiência confortável de edição que o vim oferece.

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package evil
    :after undo-tree
    :custom
    (evil-want-integration t)
    (evil-want-keybinding nil)
    (evil-want-C-u-scroll t)
    (evil-want-C-i-jump nil)
    (evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

**** Complementos do evil

O =evil-collection= aumenta a integração do =evil= com uma ampla coleção de pacotes, e o =evil-nerd-commenter= emula um dos vários plugins de comentário feitos para o vim.

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-nerd-commenter
    :after evil
    :config (evilnc-default-hotkeys t) ;; use default key bindings (M-;) in Emacs state
    :bind (:map evil-normal-state-map
                ("gc" . evilnc-comment-or-uncomment-lines)))
#+end_src

*** General

O =general.el= é um pacote análogo ao =use-package=, mas para a criação de atalhos de teclado. Eu o utilizo principalmente para criar atalhos prefixados por uma tecla-líder, à maneira do vim.

#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config

    (general-create-definer ed-leader-key
      :states '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-c")

    (ed-leader-key
      "SPC" #'find-file
      "."   #'dired-jump
      ":"   '(execute-extended-command :which-key "M-x")

      ;; compile operations
      "c"   '(:ignore t :which-key "compilation")
      "cc"  #'compile
      "cr"  #'recompile

      ;; buffer operations
      "b"  '(switch-to-buffer :which-key "buffers")
      "k"  #'kill-buffer

      ;; keymaps
      "w"   '(:keymap evil-window-map :which-key "window")
      "h"   '(:keymap help-map :which-key "help")
      "o"   '(:ignore t :which-key "open")
      "m"   '(:ignore t :which-key "mode")))
#+end_src

** Aparência

Na minha opinião, o visual padrão é ok, mas eu não usaria por um período prolongado nem sob ameaça.

*** Fonte

#+begin_src emacs-lisp
  (ed-set-font)
#+end_src

*** Tema

Meus temas principais são =modus-operandi= (claro) e =modus-vivendi= (escuro). Eu peguei da configuração do Protesilaos Stavrou, autor dos temas, um bloco de código que decide qual deles carregar de acordo com a hora. Se for dia, =modus-operandi=, senão, =modus-vivendi=.

Estou experimentando alguns outros temas no momento.

#+begin_src emacs-lisp
  (use-package modus-themes
    :custom
    (modus-themes-org-blocks 'gray-background)
    :general
    (ed-leader-key
      "t" #'modus-themes-toggle))

  ;; Outros temas
  (use-package nord-theme)
  (use-package dracula-theme)
  (use-package gruvbox-theme)

  (load-theme 'gruvbox-dark-hard t)
  ;; (let ((time (string-to-number (format-time-string "%H"))))
  ;;   (if (and (> time 5) (< time 18))
  ;;       (modus-themes-load-operandi)
  ;;     (modus-themes-load-vivendi)))
#+end_src

*** Modeline

De modo geral, eu gosto da modeline padrão. Eu só não gosto que a seção dos modos menores fique muito entulhada. O pacote =minions= substitui os "ícones" dos demais modos menores pelo próprio e oferece um menu para gerenciá-los. Ele também permite que você selecione alguns para que sejam exibidos normalmente sempre que ativos, o que é ótimo.

#+begin_src emacs-lisp
  (use-package minions
    :custom
    (minions-mode-line-lighter "...")
    (minions-prominent-modes '(flyspell-mode text-scale-mode))
    :config (minions-mode 1))
#+end_src

Eu também acho conveniente ver a hora na modeline.

#+begin_src emacs-lisp
  (setq display-time-format "%H:%M"
        display-time-default-load-average nil
        display-time-interval 60)
  (display-time-mode 1)
#+end_src

*** Linhas numeradas

Linhas numeradas são bem úteis...

#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
#+end_src

...exceto em alguns modos.

#+begin_src emacs-lisp
  (dolist (mode '(org-mode-hook
                  eww-mode-hook
                  calendar-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

*** Smooth scrolling

Eu detesto a rolagem padrão do emacs. Rolagem suave é uma necessidade básica pra mim.

#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :init (smooth-scrolling-mode 1))
#+end_src

** Completion

Frequentemente, para utilizar uma funcionalidade do emacs, é preciso selecionar uma opção entre uma lista de candidatos. O exemplo mais clássico disso é o =M-x=, que executa um comando entre os existentes. Completion é o auxílio que o editor dá ao usuário nesses processos, seja completando o que ele escreve ou simplesmente exibindo a lista de candidatos.

*** Orderless

Toda seleção se baseia nos chamados estilos de seleção. Eles são funções que mapeiam o input do usuário aos candidatos a que ele possivelmente se refere. Opções nativas existem e são o padrão, mas os estilos oferecidos pelo pacote =orderless= me agradam mais. Todos eles admitem que o input do usuário seja mapeado fora de ordem aos candidatos, o que é bem inteligente.

#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

*** Vertico

Uma versão mínima do tradicional =ivy=, o =vertico= exibe a lista de candidatos de uma seleção em uma lista vertical, o que é bem útil.

#+begin_src emacs-lisp
  (defun ed-minibuffer-backward-kill (arg)
    "Um delete mais conveniente no minibuffer"
    (interactive "p")
    (if minibuffer-completing-file-name
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (backward-delete-char arg)))

  (use-package vertico
    :general
    (general-def vertico-map
      "C-j"  #'vertico-next
      "C-k"  #'vertico-previous
      "C-l"  #'vertico-exit-input)

    (general-def minibuffer-local-map
      "M-h"          #'backward-kill-word
      "<backspace>"  #'ed-minibuffer-backward-kill)

    :init
    (vertico-mode))
#+end_src

*** Marginalia

O =marginalia= inclui anotações úteis junto aos candidatos sempre que eles são exibidos em uma interface, o que inclui a listagem nativa de candidatos e soluções de terceiros, como o =vertico=.

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :init (marginalia-mode))
#+end_src

*** Corfu

O =corfu= é análogo ao =vertico=, mas age em buffers comuns ao invés do minibuffer. Sua interface lembra bastante a de IDEs como o Intellij e o Pycharm.

#+begin_src emacs-lisp
  (use-package corfu
    :demand t
    :custom
    (corfu-cycle t)
    (corfu-preselect-first nil)
    :config
    (setq tab-always-indent 'complete)
    (corfu-global-mode 1)
    :general
    (general-def corfu-map
      "TAB"      #'corfu-next
      [tab]      #'corfu-next
      "S-TAB"    #'corfu-previous
      [backtab]  #'corfu-previous))
#+end_src

** Ferramentas

*** Org

O =org-mode= é um pacote realmente extraordinário. Em essência, ele é uma linguagem de marcação, como markdown e latex. Ele combina uma sintaxe simples e legível com uma grande riqueza de /features/, que incluem embarcação de trechos de código, suporte a latex /inline/, entre outros.

No entanto, o que realmente torna esse pacote especial é a biblioteca de funcionalidades úteis que ele oferece, que tornam essa simples linguagem um sistema eficiente de preparação de documentos, programação literária e planejamento.

**** Aparência

#+begin_src emacs-lisp
  (defun ed-org-mode-setup ()
    (org-indent-mode 1)
    (visual-line-mode 1)
    (dolist (pair '(("#+begin_src" . ?λ)
                    ("#+BEGIN_SRC" . ?λ)
                    ("#+end_src"   . ?λ)
                    ("#+END_SRC"   . ?λ)))
      (add-to-list 'prettify-symbols-alist pair))
    (prettify-symbols-mode))

  (use-package org
    :defer t
    :hook (org-mode . ed-org-mode-setup)
    :custom
    (org-hide-emphasis-markers t)
    :config
    (setq org-ellipsis " ▾"))

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("·")))

  (defun ed-org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . ed-org-mode-visual-fill))
#+end_src

**** Configuração literária
:properties:
:custom_id: lit
:end:

Utilizar uma configuração literária tem muitas vantagens. A principal é não esquecer qual é o próposito que uma parte da config cumpre dois dias depois de tê-la escrito.

#+begin_src emacs-lisp
  (defun ed-org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda () (add-hook 'after-save-hook #'ed-org-babel-tangle-config)))
#+end_src

*** Dired

O editor de diretórios ou =dired= é o explorador de arquivos nativo do emacs.

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :hook (dired-mode . dired-hide-details-mode)
    :custom
    (dired-listing-switches "-Al --group-directories-first")
    :general
    (general-def 'normal 'dired-mode-map
      "SPC" nil
      "h"   #'dired-up-directory
      "l"   #'dired-find-file))
#+end_src

*** Eshell

A =eshell= é uma shell estilo UNIX integrada ao emacs. Ela permite que você não só execute programas no sistema, mas também funções internas do emacs, o que lhe confere uma flexibilidade muito grande. Além disso, ela funciona perfeitamente no Windows, ainda que com um desempenho menor.

#+begin_src emacs-lisp
  (defun ed-eshell-prompt ()
    (concat
     (eshell/pwd)
     (if (= (user-uid) 0) " # "
       " λ ")))

  (defun ed-eshell-setup ()
    (require 'evil-collection-eshell)
    (evil-collection-eshell-setup)
    ;; Salve comandos no histórico à medida que eles forem inseridos
    (add-hook 'eshell-pre-command-hook #'eshell-save-some-history)
    ;; Reduza o buffer do eshell quando ele exceder o máximo de linhas
    (add-to-list 'eshell-output-filter-functions #'eshell-truncate-buffer))

  (use-package eshell
    :ensure nil
    :hook (eshell-first-time-mode . ed-eshell-setup)
    :custom
    (eshell-banner-message "GNU emacs shell for fun and profit\n\n")
    (eshell-history-size 10000)
    (eshell-hist-ignore-dups t)
    (eshell-buffer-maximum-lines 10000)
    (eshell-scroll-to-bottom-on-input t)
    (eshell-prompt-regexp "^[^λ#]*[λ#] ")
    (eshell-prompt-function #'ed-eshell-prompt)
    :general
    (ed-leader-key
      "oe" #'eshell))

  (use-package eshell-syntax-highlighting
    :after eshell
    :hook (eshell-mode . eshell-syntax-highlighting-mode))
#+end_src

*** Vterm

O melhor emulador de terminal para o emacs.

#+begin_src emacs-lisp
  (use-package vterm
    :general
    (ed-leader-key
      "ot" '(vterm-other-window :which-key "terminal")
      "oT" '(vterm :which-key "terminal full")))
#+end_src

*** Pomodoro

O pacote =pomm.el= implementa um [[https://pt.wikipedia.org/wiki/Técnica_pomodoro][cronômetro pomodoro]] dentro do emacs.

#+begin_src emacs-lisp
  (use-package pomm
    :commands (pomm pomm-start)
    :custom
    (pomm-state-file-location
     (no-littering-expand-var-file-name "pomm.el"))
    :general
    (ed-leader-key
      "op" '(pomm :which-key "pomodoro")))
#+end_src

** Programação

Programação é um dos usos principais que eu tenho para o emacs. Com algumas configurações e pacotes, a experiência de programar com ele é realmente excelente.

*** Git

O =magit= é um pacote clássico do emacs. Possivelmente a melhor porcelana existente para o git.

#+begin_src emacs-lisp
  (use-package magit
    :commands
    (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function
     #'magit-display-buffer-same-window-except-diff-v1)
    :general
    (ed-leader-key
      "g" '(magit-status :which-key "git")))
#+end_src

O =smerge= é uma ferramenta built-in que facilita a resolução de conflitos.

#+begin_src emacs-lisp
  (ed-leader-key 'smerge-mode-map
    "s" '(:keymap smerge-basic-map :which-key "smerge"))
#+end_src

*** Snippets

O que é um programador sem snippets?

#+begin_src emacs-lisp
  (use-package yasnippet
    :hook
    (prog-mode . yas-minor-mode)
    (org-mode . yas-minor-mode)
    :general
    (ed-leader-key
      "y" '(yas-insert-snippet :which-key "yasnippet")))

  (use-package yasnippet-snippets
    :after yasnippet)
#+end_src

*** Projetos

O pacote =projectile= é uma biblioteca de funções que operam ao nível de projeto, o que é muito útil em projetos de programação. Vários outros pacotes possuem boa integração com ele.

#+begin_src emacs-lisp
  (use-package projectile
    :init
    (setq projectile-keympa-prefix nil)
    :config
    (projectile-mode)
    :general
    (ed-leader-key
      "p" '(:keymap projectile-command-map :which-key "project")))
#+end_src

*** Linguagens

**** LSP

O /language server protocol/ (protocolo de servidores de linguagem) ou LSP é um protocolo para a comunicação entre um editor de texto e ferramentas externas de suporte para linguagens de programação (/os language servers/). O emacs não possui um cliente nativo de LSP; pelo menos não por enquanto. Felizmente, o pacote =lsp-mode= fornece essa funcionalidade, e o pacote =lsp-ui= a integra com a interface gráfica do editor.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix nil)
    :custom
    (lsp-enable-snippet t)
    (lsp-completion-provider :none)
    :config
    (setq lsp-headerline-breadcrumb-enable nil)
    (lsp-enable-which-key-integration t)
    :general
    (ed-leader-key
      "l" '(:keymap lsp-command-map :which-key "lsp")))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    ;; lsp-ui documentation panels
    (lsp-ui-doc-max-height 8)
    (lsp-ui-doc-max-width 72)
    (lsp-ui-doc-delay 0.75)
    (lsp-ui-doc-show-with-cursor nil)
    (lsp-ui-doc-show-with-mouse nil)
    (lsp-ui-doc-position 'at-point)

    ;; lsp-ui sideline
    (lsp-ui-sideline-show-diagnostics t)
    (lsp-ui-sideline-show-code-actions nil)
    (lsp-ui-sideline-actions-icon lsp-ui-sideline-actions-icon-default)

    ;; lsp-ui miscelaneous
    (lsp-lens-enable nil)
    (lsp-signature-render-documentation nil))
#+end_src

**** Flycheck

Um sistema de checagem sintática que se integra bem ao =lsp-mode=.

#+begin_src emacs-lisp
  (use-package flycheck
    :hook (lsp-mode . flycheck-mode))
#+end_src

**** Tree-sitter

O pacote =tree-sitter= integra o emacs com o excelente programa de mesmo nome, o que pode ser utilizado para melhorar o suporte dado a várias linguagens.

#+begin_src emacs-lisp
  (use-package tree-sitter
    :hook (tree-sitter-after-on . tree-sitter-hl-mode)
    :config
    (global-tree-sitter-mode 1))

  (use-package tree-sitter-langs
    :after tree-sitter)
#+end_src

**** Setup

Setups específicos para as principais linguagens que eu utilizo.

***** Assembly

#+begin_src emacs-lisp
  (use-package nasm-mode
    :mode "\\.asm\\'")
#+end_src

***** C/C++

#+begin_src emacs-lisp
  (defun ed-c-cpp-setup ()
    (c-set-style "cc-mode")
    (lsp-deferred))

  (use-package cc-mode
    :hook ((c-mode . ed-c-cpp-setup)
           (c++-mode . ed-c-cpp-setup)))
#+end_src

***** Common Lisp

#+begin_src emacs-lisp
  (use-package sly
    :hook (lisp-mode . sly))
#+end_src

***** Python

#+begin_src emacs-lisp
  (defun ed-python-setup ()
    (require 'lsp-pyright)
    (lsp-deferred))

  (use-package python-mode)
  (use-package lsp-pyright
    :hook (python-mode . ed-python-setup))
#+end_src

***** Outros

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

*** Miscelânea

O modo menor =electric-pair-mode= previne delimitadores desbalanceados.

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook   #'electric-pair-mode)
  (add-hook 'eshell-mode-hook #'electric-pair-local-mode)
#+end_src

** Mensagens de novo

Eu desativo a emissão de mensagens no =early-init.el=, mas essa configuração só é útil durante a inicialização. Depois, eu gosto de ter mensagens.

#+begin_src emacs-lisp
  (setq-default inhibit-message nil)
#+end_src
